package fr.enedis.grafana.dsl.dashboard

import fr.enedis.grafana.dsl.DashboardElement
import fr.enedis.grafana.dsl.annotations.Annotations
import fr.enedis.grafana.dsl.annotations.AnnotationsBuilder
import fr.enedis.grafana.dsl.dashboard.link.DashboardLinks
import fr.enedis.grafana.dsl.dashboard.link.DashboardLinksBuilder
import fr.enedis.grafana.dsl.generators.PanelLayoutGenerator
import fr.enedis.grafana.dsl.generators.SimplePanelLayoutGenerator
import fr.enedis.grafana.dsl.panels.Panel
import fr.enedis.grafana.dsl.panels.Panels
import fr.enedis.grafana.dsl.panels.PanelsBuilder
import fr.enedis.grafana.dsl.time.*
import fr.enedis.grafana.dsl.variables.Variables
import fr.enedis.grafana.dsl.variables.VariablesBuilder

/**
 * Dashboard builder.
 *
 * @property title Dashboard title
 *
 * @author Dmitry Komarov
 * @since 7/21/18
 */
@DashboardElement
class DashboardBuilder(private val title: String) {

    private val panels = mutableListOf<Panel>()

    var timeRange = now - 6.h..now

    var refresh: Refresh = 30.s

    var nowDelay: Duration? = null

    val tags = mutableListOf<String>()

    val variables = VariablesBuilder()

    var uid: String? = null

    var editable: Boolean = true

    var graphTooltip: GraphTooltip = GraphTooltip.DEFAULT

    private val annotations = AnnotationsBuilder()

    private val links = DashboardLinksBuilder()

    private val panelLayoutGenerator: PanelLayoutGenerator = SimplePanelLayoutGenerator()

    fun panels(build: PanelsBuilder.() -> Unit) {
        val builder = PanelsBuilder(panelLayoutGenerator)
        builder.build()
        panels += builder.panels
    }

    /**
     * Builder for annotations that displayed on graphs.
     *
     * Can be used several times without any overwriting of previous created annotations.
     */
    fun annotations(build: AnnotationsBuilder.() -> Unit) {
        annotations.build()
    }

    /**
     * Builder fot dashboard links which are displayed on top of a dashboard
     */
    fun links(build: DashboardLinksBuilder.() -> Unit) {
        links.build()
    }

    internal fun createDashboard() = Dashboard(
        uid = uid,
        title = title,
        timeRange = timeRange,
        refresh = refresh,
        nowDelay = nowDelay,
        tags = Tags(tags + "autogenerated"),
        variables = Variables(variables.variables),
        panels = Panels(panels),
        annotations = Annotations(annotations.annotations),
        links = DashboardLinks(links.links),
        editable = editable,
        graphTooltip = graphTooltip
    )

}
