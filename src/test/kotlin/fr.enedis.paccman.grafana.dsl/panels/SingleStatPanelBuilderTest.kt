package fr.enedis.grafana.dsl.panels

import org.junit.jupiter.api.Test
import fr.enedis.grafana.dsl.dashboard
import fr.enedis.grafana.dsl.datasource.Zabbix
import fr.enedis.grafana.dsl.jsonFile
import fr.enedis.grafana.dsl.panels.repeat.Horizontal
import fr.enedis.grafana.dsl.shouldEqualToJson
import fr.enedis.grafana.dsl.variables.RefreshMode

class SingleStatPanelBuilderTest {

    @Test
    fun `create singlestat with repeat`() {

        // expect
        val minimalDashboard = dashboard("TestAutogenerated") {

            val hosts by variables.query(datasource = Zabbix, query = "Skrat Back.*") {
                regex = ".*acquirer.*"
                refreshMode = RefreshMode.ON_TIME_RANGE_CHANGE
                includeAllValue = true
            }

            panels {
                singleStat(hosts.asVariable()) {
                    bounds = 3 to 3

                    repeat(hosts) {
                        direction = Horizontal(2)
                    }

                    metrics<Zabbix> {
                        textQuery {
                            host = hosts.asVariable()
                            application = "Application data"
                            item = "Application dynamic config version"
                            group = "/.*/"
                            textFilter = ".{11}"
                        }
                    }

                    valueMappings<ValueToTextType> {
                        valueToText {
                            "null" to "N/A"
                        }
                    }

                    timerange {
                        hideTimeOverrideInfo = true
                    }
                }
            }
        }

        // that
        minimalDashboard.toString() shouldEqualToJson jsonFile("SinglestatBuilderWithRepeat.json")
    }

    @Test
    fun `create singlestat without repeat`() {

        // expect
        val minimalDashboard = dashboard("TestAutogenerated") {

            val hosts by variables.query(datasource = Zabbix, query = "Skrat Back.*") {
                regex = ".*acquirer.*"
                refreshMode = RefreshMode.ON_TIME_RANGE_CHANGE
                includeAllValue = true
            }

            panels {
                singleStat(hosts.asVariable()) {
                    bounds = 3 to 3

                    metrics<Zabbix> {
                        textQuery {
                            host = hosts.asVariable()
                            application = "/App acquirer Ping General/"
                            item = "/service version/"
                            group = "/.*/"
                            useCaptureGroups = true
                        }
                    }

                    valueMappings<ValueToTextType> {
                        valueToText {
                            "null" to "N/A"
                        }
                    }

                    timerange {
                        hideTimeOverrideInfo = true
                    }
                }
            }
        }

        // that
        minimalDashboard.toString() shouldEqualToJson jsonFile("SinglestatBuilderWithoutRepeat.json")
    }
}
