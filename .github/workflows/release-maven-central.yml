name: Release on maven central

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version to push to maven central'
        required: true
        default: 'X.Y.Z'

permissions:
  contents: write  # Allows pushing tags and commits
  packages: write  # Allows publishing to GitHub Packages if needed

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for tags

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-${{ runner.os }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get Current Version
        id: current_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Increment Version
        run: |
          NEW_VERSION=${{ github.event.inputs.version }}
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and Tag New Version
        run: |
          git commit -am "Release version $NEW_VERSION"
          git tag v$NEW_VERSION
          git push origin main --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: "Automated release of version ${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment to Next Snapshot Version
        run: |
          NEXT_VERSION=$(echo $NEW_VERSION | awk -F. -v OFS=. '{$(NF-1) += 1; $NF=0; print}')
          SNAPSHOT_VERSION="$NEXT_VERSION-SNAPSHOT"
          mvn versions:set -DnewVersion=$SNAPSHOT_VERSION
          mvn versions:commit
          echo "SNAPSHOT_VERSION=$SNAPSHOT_VERSION" >> $GITHUB_ENV

      - name: Commit and Push New Snapshot Version
        run: |
          git commit -am "Prepare for next development iteration: $SNAPSHOT_VERSION"
          git push origin main
